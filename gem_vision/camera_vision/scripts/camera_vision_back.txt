from __future__ import print_function

import sys
import copy
import time
import rospy
import rospkg

import cv2
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg

from std_msgs.msg import String, Float64
from geometry_msgs.msg import Point
from sensor_msgs.msg import Image, CameraInfo, CompressedImage
from cv_bridge import CvBridge, CvBridgeError
sys.path.append("./src/gem_vision/camera_vision/scripts/Detector/")
from yolo_detect_image import yolo_detect_image

class ImageConverter:
    
    def __init__(self):
        self.node_name = "gem_vision"

        rospy.init_node(self.node_name)

        rospy.on_shutdown(self.cleanup)

        self.bridge = CvBridge()

        self.image_sub = rospy.Subscriber("/front_single_camera/image_raw", Image, self.image_callback)
        # self.image_depth_sub = rospy.Subscriber("/stereo/camera/left/image_raw", Image, self.image_depth_callback)
        self.image_pub = rospy.Publisher("/front_single_camera/image_processed", Image, queue_size=1)


    def image_depth_callback(self, ros_depth_image):
        try:
            depth_frame = self.bridge.imgmsg_to_cv2(ros_depth_image, "bgr8")
        except CvBridgeError as e:
            rospy.logerr("CvBridge Error: {0}".format(e))
        print("Depth information", depth_frame)

    def image_callback(self, ros_image):
        try:
            frame = self.bridge.imgmsg_to_cv2(ros_image, "bgr8")
        except CvBridgeError as e:
            rospy.logerr("CvBridge Error: {0}".format(e))

        # ----------------- Imaging processing code starts here ----------------

        pub_image = np.copy(frame)

        image_frame = np.copy(frame)

        print(pub_image.shape)
        detected_list = yolo_detect_image(image_frame)
        print("Detected Objects", detected_list)
        # print(cv2.__version__)
        
        




        # ----------------------------------------------------------------------

        try:
            self.image_pub.publish(self.bridge.cv2_to_imgmsg(pub_image, "bgr8"))
        except CvBridgeError as e:
            rospy.logerr("CvBridge Error: {0}".format(e))
    
    def cleanup(self):
        print ("Shutting down vision node.")
        cv2.destroyAllWindows()


def main(args):

    try:
        ImageConverter()
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down vision node.")
        cv2.destryAllWindows()


if __name__ == '__main__':
    main(sys.argv)